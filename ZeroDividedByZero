from __future__ import print_function

import random


# --------------- Helpers that build all of the responses ----------------------

def build_speechlet_response(title, output, reprompt_text, should_end_session):
    return {
        'outputSpeech': {
            'type': 'PlainText',
            'text': output
        },
        'card': {
            'type': 'Simple',
            'title': title,
            'content': output
        },
        'reprompt': {
            'outputSpeech': {
                'type': 'PlainText',
                'text': reprompt_text
            }
        },
        'shouldEndSession': should_end_session
    }


def build_response(session_attributes, speechlet_response):
    return {
        'version': '1.0',
        'sessionAttributes': session_attributes,
        'response': speechlet_response
    }


# --------------- Functions that control the skill's behavior ------------------

def get_welcome_response():
    """ If we wanted to initialize the session to have some attributes we could
    add those here
    """

    session_attributes = {}
    card_title = "Welcome"
    speech_output = "You may ask me for pick up lines, or poems "\
                    "or for the infamous value of zero divided by zero! \n"\
                    "Which one would you like?"
    # If the user either does not reply to the welcome message or says something
    # that is not understood, they will be prompted again with this text.
    reprompt_text = speech_output;
    should_end_session = False
    return build_response(session_attributes, build_speechlet_response(
        card_title, speech_output, reprompt_text, should_end_session))


def handle_session_end_request():
    card_title = "Session Ended"
    speech_output = "Bye! It was nice laughing with you"
    should_end_session = True
    return build_response({}, build_speechlet_response(
        card_title, speech_output, None, should_end_session))



def zeroDividedByZero():

    session_attributes = {}
    card_title="0/0: Indeterminate"
    should_end_session = True

    reprompt_text=None
    speech_output="Imagine that you have zero cookies and you split them evenly among zero friends. "\
                  "How many cookies does each person get?"\
                  "See it makes no sense. And cookie monster is sad that there are no cookies. "\
                  "And you are sad that you have no friends."
    return build_response(session_attributes, build_speechlet_response(
        card_title, speech_output, reprompt_text, should_end_session))

def poem():
    
    session_attributes = {}
    should_end_session = True
    card_title = ""
    
    reprompt_text=None
    
    speech_outputs=["I'm not sure that's such a good idea. "\
                "I write the fouth-worst poetry in the universe.",
                "Roses are red, \n"\
                "violets are blue. \n"\
                "Haven't you got \n"\
                "anything better to do?",

                "Oh freddled gruntbuggly \n\n"\
                "Thy micturiations are to me \n\n"\
                "As plurdled gabbleblotchits on a lurgid... \n"\
                "Oh! Even I can't listen to this anymore. "

                ]
    random_index=random.randrange(3)
    speech_output=speech_outputs[random_index]
    
    
    return build_response(session_attributes, build_speechlet_response(
        card_title, speech_output, reprompt_text, should_end_session))
   
    

def pickupLines():
    session_attributes = {}
    should_end_session = True
    card_title = ""
    
    reprompt_text=None
    
    speech_outputs=["Is your name Bluetooth?"\
                    "Because I'm really feeling a connection.",
                    "My love for you is a monotonically increasing "\
                    "unbounded function.",
                    "My love for you is like a fractal - "\
                    "it goes on forever.",
                    "Like the ideal vacuum, you're the only thing "\
                    "in my universe.",
                    "You auto-complete me.",
                    "Are you a 45 degree angle?\n"\
                    "Because you're acute-y."]
    random_index=random.randrange(len(speech_outputs))
    speech_output=speech_outputs[random_index]
    
    
    return build_response(session_attributes, build_speechlet_response(
        card_title, speech_output, reprompt_text, should_end_session))

    
    

# --------------- Events ------------------

def on_session_started(session_started_request, session):
    """ Called when the session starts """

    print("on_session_started requestId=" + session_started_request['requestId']
          + ", sessionId=" + session['sessionId'])


def on_launch(launch_request, session):
    """ Called when the user launches the skill without specifying what they
    want
    """

    print("on_launch requestId=" + launch_request['requestId'] +
          ", sessionId=" + session['sessionId'])
    # Dispatch to your skill's launch
    return get_welcome_response()


def on_intent(intent_request, session):
    """ Called when the user specifies an intent for this skill """

    print("on_intent requestId=" + intent_request['requestId'] +
          ", sessionId=" + session['sessionId'])

    intent = intent_request['intent']
    intent_name = intent_request['intent']['name']

    # Dispatch to your skill's intent handlers
    if intent_name == "zeroDividedByZero":
        return zeroDividedByZero()
    elif intent_name == "poem":
        return poem()
    elif intent_name == "pickup":
        return pickupLines()
    elif intent_name == "AMAZON.HelpIntent":
        return get_welcome_response()
    elif intent_name == "AMAZON.CancelIntent" or intent_name == "AMAZON.StopIntent":
        return handle_session_end_request()
    else:
        raise ValueError("Invalid intent")


def on_session_ended(session_ended_request, session):
    """ Called when the user ends the session.

    Is not called when the skill returns should_end_session=true
    """
    print("on_session_ended requestId=" + session_ended_request['requestId'] +
          ", sessionId=" + session['sessionId'])
    # add cleanup logic here


# --------------- Main handler ------------------

def lambda_handler(event, context):
    """ Route the incoming request based on type (LaunchRequest, IntentRequest,
    etc.) The JSON body of the request is provided in the event parameter.
    """
    print("event.session.application.applicationId=" +
          event['session']['application']['applicationId'])

    if event['session']['new']:
        on_session_started({'requestId': event['request']['requestId']},
                           event['session'])

    if event['request']['type'] == "LaunchRequest":
        return on_launch(event['request'], event['session'])
    elif event['request']['type'] == "IntentRequest":
        return on_intent(event['request'], event['session'])
    elif event['request']['type'] == "SessionEndedRequest":
        return on_session_ended(event['request'], event['session'])
