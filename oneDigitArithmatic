from __future__ import print_function

# --------------- Helpers that build all of the responses ----------------------

def build_speechlet_response(title, output, reprompt_text, should_end_session):
    return {
        'outputSpeech': {
            'type': 'PlainText',
            'text': output
        },
        'card': {
            'type': 'Simple',
            'title': title,
            'content': output
        },
        'reprompt': {
            'outputSpeech': {
                'type': 'PlainText',
                'text': reprompt_text
            }
        },
        'shouldEndSession': should_end_session
    }


def build_response(session_attributes, speechlet_response):
    return {
        'version': '1.0',
        'sessionAttributes': session_attributes,
        'response': speechlet_response
    }


# --------------- Functions that control the skill's behavior ------------------

def get_welcome_response():

    session_attributes = {}
    card_title = "Hi!"
    speech_output = "Welcome to basic calculator! " \
                    "You can ask me to add, subtract, multiply or divide 2 positive integers in the following manner:\n " \
                    "'Cal C, what is the addition of one and two' or"\
                    "'Cal C, what is the two minus one'"
    
    """ If the user either does not reply to the welcome message or says something
     that is not understood, they will be prompted again with this text."""
    
    reprompt_text = "You can ask me to add, subtract, multiply or divide 2 positive integers in the following manner:\n " \
                    "'Cal C, what is the addition of one and two' or"\
                    "'Cal C, what is the two minus one'"
    should_end_session = False
    return build_response(session_attributes, build_speechlet_response(
        card_title, speech_output, reprompt_text, should_end_session))

def handle_session_end_request():
    card_title = "Closing Calculator"
    speech_output = "Call me again by invoking CalC!"
    should_end_session = True
    return build_response({}, build_speechlet_response(
        card_title, speech_output, None, should_end_session))



def addition(intent_request):
    session_attributes = {}
    reprompt_text="You can ask me to add, subtract, multiply or divide 2 positive integers in the following manner:\n " \
                    "'Cal C, what is the addition of one and two' or"\
                    "'Cal C, what is the two minus one'"
    
    if("value" in str(intent_request['intent']['slots']['b']) and "value" in str(intent_request['intent']['slots']['a'])):

        num1=int(intent_request['intent']['slots']['a']['value'])
        num2=int(intent_request['intent']['slots']['b']['value'])
        card_title="Add: "+str(num1)+" + "+str(num2)
        should_end_session=True
            
        speech_output=str(num1+num2)
        
    else:
        speech_output="There was a problem with the given input.\n"\
                      "You may ask me to add two positive integers in the following manner:\n"\
                      "'Cal C. what is one plus two?'\n"\
                      "Would you mind repeating the question?"
        
        card_title="Invalid input"
        should_end_session=False;
    
    return build_response(session_attributes, build_speechlet_response(
        card_title, speech_output, reprompt_text, should_end_session))


def subtraction(intent_request):
    session_attributes = {}
    reprompt_text="You can ask me to add, subtract, multiply or divide 2 positive integers in the following manner:\n " \
                    "'Cal C, what is the addition of one and two' or"\
                    "'Cal C, what is the two minus one'"
    
    if("value" in str(intent_request['intent']['slots']['b']) and "value" in str(intent_request['intent']['slots']['a'])):
    
        num1=int(intent_request['intent']['slots']['a']['value'])
        num2=int(intent_request['intent']['slots']['b']['value'])
        
        card_title="Subtract: "+str(num1)+" - "+str(num2)
        speech_output=str(num1-num2)
        
        should_end_session=True
        
    else:
    
        speech_output="There was a problem with the given input.\n"\
                      "You may ask me to subtract two positive integers in the following manner:\n"\
                      "'Cal C. what is one minus two?'\n"\
                      "Would you mind repeating the question?"
        
        card_title="Invalid input"
        should_end_session=False;
    
    
    
    
    return build_response(session_attributes, build_speechlet_response(
        card_title, speech_output, reprompt_text, should_end_session))

def multiplication(intent_request):
    session_attributes = {}
    reprompt_text="You can ask me to add, subtract, multiply or divide 2 positive integers in the following manner:\n " \
                    "'Cal C, what is the addition of one and two' or"\
                    "'Cal C, what is the two minus one'"
    
    if("value" in str(intent_request['intent']['slots']['b']) and "value" in str(intent_request['intent']['slots']['a'])):

        num1=int(intent_request['intent']['slots']['a']['value'])
        num2=int(intent_request['intent']['slots']['b']['value'])
        
        card_title="Multply: "+str(num1)+" * "+str(num2)
        should_end_session=True
        speech_output=str(num1*num2)
    else:
    
        speech_output="There was a problem with the given input.\n"\
                      "You may ask me to multiply two positive integers in the following manner:\n"\
                      "'Cal C. what is the multiplication of one and two?'\n"\
                      "Would you mind repeating the question?"
        
        card_title="Invalid input"
        should_end_session=False;
    
    
    
    return build_response(session_attributes, build_speechlet_response(
        card_title, speech_output, reprompt_text, should_end_session))


def division(intent_request):
    session_attributes = {}
    reprompt_text="You can ask me to add, subtract, multiply or divide 2 positive integers in the following manner:\n " \
                    "'Cal C, what is the addition of one and two' or"\
                    "'Cal C, what is the two minus one'"
    
    if("value" in str(intent_request['intent']['slots']['b']) and "value" in str(intent_request['intent']['slots']['a'])):

        num1=float(intent_request['intent']['slots']['a']['value'])
        num2=float(intent_request['intent']['slots']['b']['value'])
        
        card_title="Divide: "+str(num1)+" / "+str(num2)
        should_end_session=True
        
        try:
            speech_output=str(num1/num2)
        except:
            speech_output="Error!"
    else:
    
        speech_output="There was a problem with the given input.\n"\
                      "You may ask me to divide two positive integers in the following manner:\n"\
                      "'Cal C. what is one divided by two?'\n"\
                      "Would you mind repeating the question?"
        
        card_title="Invalid input"
        should_end_session=False;
        
    return build_response(session_attributes, build_speechlet_response(
        card_title, speech_output, reprompt_text, should_end_session))

# --------------- Events ------------------

def on_session_started(session_started_request, session):
    """ Called when the session starts """

    print("on_session_started requestId=" + session_started_request['requestId']
          + ", sessionId=" + session['sessionId'])


def on_launch(launch_request, session):
    """ Called when the user launches the skill without specifying what they
    want
    """

    print("on_launch requestId=" + launch_request['requestId'] +
          ", sessionId=" + session['sessionId'])
    # Launch the skill
    return get_welcome_response()


def on_intent(intent_request, session):
    """ Called when the user specifies an intent for this skill """

    print("on_intent requestId=" + intent_request['requestId'] +
          ", sessionId=" + session['sessionId'])

    intent = intent_request['intent']
    
    intent_name = intent_request['intent']['name']
    
    """if(intent_name in ["add","subtract","multiply","divide"]):
        if("value" not in str(intent_request['intent']['slots']['b']) or "value" not in str(intent_request['intent']['slots']['a'])):
            return get_welcome_response();
    """
    
    # Dispatch to your skill's intent handlers
    if intent_name == "add":
        return addition(intent_request)
    elif intent_name == "subtract":
        return subtraction(intent_request)
    elif intent_name == "multiply":
        return multiplication(intent_request)
    elif intent_name == "divide":
        return division(intent_request)
    elif intent_name == "AMAZON.HelpIntent":
        return get_welcome_response()
    elif intent_name == "AMAZON.CancelIntent" or intent_name == "AMAZON.StopIntent":
        return handle_session_end_request()
    else:
        raise ValueError("Invalid intent")


def on_session_ended(session_ended_request, session):
    """ Called when the user ends the session.

    Is not called when the skill returns should_end_session=true
    """
    print("on_session_ended requestId=" + session_ended_request['requestId'] +
          ", sessionId=" + session['sessionId'])
    

# --------------- Main handler ------------------

def lambda_handler(event, context):
    """ Route the incoming request based on type (LaunchRequest, IntentRequest,
    etc.) The JSON body of the request is provided in the event parameter.
    """
    print("event.session.application.applicationId=" +
          event['session']['application']['applicationId'])

    if event['session']['new']:
        on_session_started({'requestId': event['request']['requestId']},
                           event['session'])

    if event['request']['type'] == "LaunchRequest":
        return on_launch(event['request'], event['session'])
    elif event['request']['type'] == "IntentRequest":
        return on_intent(event['request'], event['session'])
    elif event['request']['type'] == "SessionEndedRequest":
        return on_session_ended(event['request'], event['session'])
